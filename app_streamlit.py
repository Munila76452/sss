# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15zEC3A3ifSwfCuy5GLe89zeyycNA_nob
"""



import streamlit as st
import pandas as pd
import numpy as np
import folium
from folium.plugins import HeatMap
from geopy.geocoders import Nominatim
import requests
from sklearn.ensemble import RandomForestRegressor
import time
import io

# ---------------------------
# Setup
# ---------------------------
st.set_page_config(layout="wide", page_title="Plant Disease Outbreak + Forecast")

disease_options = [
    'Apple___Apple_scab', 'Apple___Black_rot', 'Apple___Cedar_apple_rust', 'Apple___healthy',
    'Blueberry___healthy', 'Cherry_(including_sour)___Powdery_mildew', 'Cherry_(including_sour)___healthy',
    'Corn_(maize)___Cercospora_leaf_spot Gray_leaf_spot', 'Corn_(maize)___Common_rust_',
    'Corn_(maize)___Northern_Leaf_Blight', 'Corn_(maize)___healthy', 'Grape___Black_rot',
    'Grape___Esca_(Black_Measles)', 'Grape___Leaf_blight_(Isariopsis_Leaf_Spot)', 'Grape___healthy',
    'Orange___Haunglongbing_(Citrus_greening)', 'Peach___Bacterial_spot', 'Peach___healthy',
    'Pepper,_bell___Bacterial_spot', 'Pepper,_bell___healthy', 'Potato___Early_blight',
    'Potato___Late_blight', 'Potato___healthy', 'Raspberry___healthy', 'Soybean___healthy',
    'Squash___Powdery_mildew', 'Strawberry___Leaf_scorch', 'Strawberry___healthy',
    'Tomato___Bacterial_spot', 'Tomato___Early_blight', 'Tomato___Late_blight', 'Tomato___Leaf_Mold',
    'Tomato___Septoria_leaf_spot', 'Tomato___Spider_mites Two-spotted_spider_mite',
    'Tomato___Target_Spot', 'Tomato___Tomato_Yellow_Leaf_Curl_Virus', 'Tomato___Tomato_mosaic_virus',
    'Tomato___healthy'
]

# storage
if "df" not in st.session_state:
    st.session_state.df = pd.DataFrame(columns=["date", "latitude", "longitude", "disease", "severity"])

# ---------------------------
# Helpers
# ---------------------------
def geocode_place(place: str):
    geolocator = Nominatim(user_agent="plant_disease_app")
    loc = geolocator.geocode(place + ", India", timeout=10)
    time.sleep(1)
    if not loc:
        raise ValueError(f"Could not geocode '{place}'")
    return loc.latitude, loc.longitude

def add_outbreak_row(place, disease, severity):
    lat, lon = geocode_place(place)
    new_row = {
        "date": pd.Timestamp.now().strftime("%Y-%m-%d"),
        "latitude": lat,
        "longitude": lon,
        "disease": disease,
        "severity": severity
    }
    st.session_state.df = pd.concat([st.session_state.df, pd.DataFrame([new_row])], ignore_index=True)

def folium_map(df):
    m = folium.Map(location=[20.5937, 78.9629], zoom_start=5)
    heat_data = [[r["latitude"], r["longitude"], r["severity"]] for _, r in df.iterrows()]
    if heat_data:
        HeatMap(heat_data, radius=15).add_to(m)
    for _, r in df.iterrows():
        color = "red" if "healthy" not in r["disease"].lower() else "green"
        popup = f"{r['disease']}<br>Severity: {r['severity']}"
        folium.CircleMarker([r["latitude"], r["longitude"]],
                            radius=6 + r["severity"]*10,
                            color=color, fill=True, fill_opacity=0.8,
                            popup=popup).add_to(m)
    return m

# ---------------------------
# UI
# ---------------------------
st.title("🌍 Geo-tagged Outbreak Visualization + Forecast")

st.sidebar.header("Add Outbreak Data")
disease = st.sidebar.selectbox("Disease", disease_options)
severity = st.sidebar.slider("Severity (0 = mild, 1 = severe)", 0.0, 1.0, 0.5, 0.05)
place = st.sidebar.text_input("Enter Location (e.g., Pune, Maharashtra)")
if st.sidebar.button("Add to dataset"):
    try:
        add_outbreak_row(place, disease, severity)
        st.sidebar.success("Added successfully ✅")
    except Exception as e:
        st.sidebar.error(str(e))

# Show table
st.subheader("Outbreak Dataset")
st.dataframe(st.session_state.df)

# Map
st.subheader("Outbreak Map")
if len(st.session_state.df) > 0:
    m = folium_map(st.session_state.df)
    st.components.v1.html(m.get_root().render(), height=500)
else:
    st.info("No data yet. Add outbreak info from the sidebar.")

# ---------------------------
# (Optional) Simple Forecast Placeholder
# ---------------------------
st.subheader("Forecast Risk (Demo)")
if len(st.session_state.df) > 0:
    df = st.session_state.df.copy()
    # Simple fake forecast = severity * random factor
    df["forecast_risk"] = df["severity"] * np.random.uniform(0.8, 1.2, size=len(df))
    st.dataframe(df[["disease", "latitude", "longitude", "severity", "forecast_risk"]])

if __name__ == "__main__":
    # Add one outbreak manually for testing
    add_outbreak_row("Pune, Maharashtra", "Tomato___Late_blight", 0.7)

    print("Dataset:")
    print(st.session_state.df)

    # Forecast
    df = st.session_state.df.copy()
    df["forecast_risk"] = df["severity"] * np.random.uniform(0.8, 1.2, size=len(df))
    print(df)

    # Save map to HTML
    m = folium_map(df)
    m.save("outbreak_map.html")
    print("✅ Map saved as outbreak_map.html")

